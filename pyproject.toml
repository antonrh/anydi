[tool.poetry]
name = "anydi"
version = "0.32.2"
description = "Dependency Injection library"
authors = ["Anton Ruhlov <antonruhlov@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/antonrh/anydi"
keywords = ["dependency injection", "dependencies", "di", "async", "asyncio", "application"]
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Development Status :: 5 - Production/Stable",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
]
packages = [
    { include = "anydi", from = "." },
]

[tool.poetry.dependencies]
python = "^3.9"
typing-extensions = "^4.12.1"
anyio = { version = "^3.6.2", optional = true }
mkdocs = { version = "^1.4.2", optional = true }
mkdocs-material = { version = "^9.5.29", optional = true }

[tool.poetry.extras]
docs = ["mkdocs", "mkdocs-material"]
async = ["anyio"]

[tool.poetry.group.dev.dependencies]
mypy = { version = "^1.14.0", extras = ["faster-cache"] }
ruff = "^0.8.4"
pytest = "^8.3.1"
pytest-cov = "^5.0.0"
fastapi = "^0.100.0"
httpx = "^0.26.0"
django = "^4.2"
django-stubs = "^5.1.1"
django-ninja = "^1.1.0"
pytest-django = "^4.8.0"
faststream = "^0.5.10"
redis = "^5.0.4"
pydantic-settings = "^2.4.0"

[tool.poetry.plugins.pytest11]
anydi = "anydi.ext.pytest_plugin"

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = ["A", "B", "C", "E", "F", "I", "W", "TID252", "T20", "UP", "FURB"]
ignore = ["A003", "B008", "B009", "B010", "D104", "D107"]

[tool.ruff.lint.isort]
combine-as-imports = true
forced-separate = ["tests", "app"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = [
    "django.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disable_error_code = ["comparison-overlap"]

[tool.pytest.ini_options]
addopts = [
    "--strict-config",
    "--strict-markers",
]
xfail_strict = true
junit_family = "xunit2"
DJANGO_SETTINGS_MODULE = "tests.ext.django.settings"

[tool.coverage.report]
exclude_also = [
    "pragma: no cover",
    "@abstractmethod",
    "@abc.abstractmethod",
    "if TYPE_CHECKING",
    "if t.TYPE_CHECKING",
    "@overload",
    "@t.overload",
    "raise NotImplementedError",
    "except ImportError:",
    "if has_signature_eval_str_arg",
    "if not anyio:",
]

[tool.coverage.run]
omit = [
    "anydi/ext/django/ninja/_operation.py",
    "anydi/ext/django/ninja/_signature.py",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
