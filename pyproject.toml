[project]
name = "anydi"
version = "0.46.0"
description = "Dependency Injection library"
authors = [{ name = "Anton Ruhlov", email = "antonruhlov@gmail.com" }]
requires-python = "~=3.9"
readme = "README.md"
license = "MIT"
keywords = [
    "dependency injection",
    "dependencies",
    "di",
    "async",
    "asyncio",
    "application",
]
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Development Status :: 5 - Production/Stable",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
]
dependencies = [
    "typing-extensions>=4.14.0,<5",
    "anyio>=3.7.1",
    "wrapt>=1.17.0,<2",
]

[project.urls]
Repository = "https://github.com/antonrh/anydi"

[project.entry-points.pytest11]
anydi = "anydi.ext.pytest_plugin"

[dependency-groups]
dev = [
    "ruff>=0.11.10,<1.0",
    "pytest>=8.4.0,<9",
    "pytest-cov>=6.0.0,<7",
    "starlette>=0.37.2",
    "fastapi>=0.100.0",
    "httpx>=0.26.0",
    "django~=4.2",
    "django-stubs>=5.1.1,<6",
    "django-ninja>=1.1.0,<2",
    "pytest-django>=4.8.0,<5",
    "faststream>=0.5.10,<0.6",
    "redis>=5.0.4,<6",
    "pydantic-settings>=2.4.0,<3",
    "bump-my-version>=1.1.4",
    "pyright>=1.1.401",
    "pytest-mock>=3.14.1",
]
docs = [
    "mkdocs>=1.4.2,<2",
    "mkdocs-material>=9.5.29,<10",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 88
target-version = "py39"
include = [
    "anydi/**/*.py",
    "tests/**/*.py",
]

[tool.ruff.lint]
select = ["A", "B", "C", "E", "F", "I", "W", "TID252", "T20", "UP", "FURB", "PT"]
ignore = ["B008", "B009"]

[tool.ruff.lint.isort]
combine-as-imports = true
forced-separate = ["tests", "app"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pyright]
include = [
    "anydi/**/*.py",
    "tests/**/*.py",
]
strict = [
    "anydi/*.py",
]
typeCheckingMode = "standard"
enableExperimentalFeatures = true

[tool.pytest.ini_options]
addopts = [
    "--strict-config",
    "--strict-markers",
]
xfail_strict = true
junit_family = "xunit2"
DJANGO_SETTINGS_MODULE = "tests.ext.django.settings"

[tool.coverage.report]
exclude_also = [
    "pragma: no cover",
    "@abstractmethod",
    "@abc.abstractmethod",
    "if TYPE_CHECKING",
    "if t.TYPE_CHECKING",
    "@overload",
    "@t.overload",
    "raise NotImplementedError",
    "except ImportError:",
    "if has_signature_eval_str_arg",
    "if not anyio:",
]

[tool.coverage.run]
omit = [
    "anydi/ext/django/ninja/_operation.py",
    "anydi/ext/django/ninja/_signature.py",
]

[tool.bumpversion]
current_version = "0.46.0"
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        -                             # dash separator for pre-release section
        (?P<pre_l>[a-zA-Z-]+)         # pre-release label
        (?P<pre_n>0|[1-9]\\d*)        # pre-release version number
    )?                                # pre-release section is optional
"""
serialize = [
    "{major}.{minor}.{patch}-{pre_l}{pre_n}",
    "{major}.{minor}.{patch}",
]
search = "{current_version}"
replace = "{new_version}"
message = "Bump version: {current_version} â†’ {new_version}"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[tool.bumpversion.parts.pre_l]
values = ["rc", "final"]
optional_value = "final"
